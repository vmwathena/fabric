// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peer/concord_hlf.proto

package peer // import "github.com/hyperledger/fabric/protos/peer"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type KvbMessageType int32

const (
	KvbMessage_VALID   KvbMessageType = 0
	KvbMessage_INVALID KvbMessageType = 1
)

var KvbMessageType_name = map[int32]string{
	0: "VALID",
	1: "INVALID",
}
var KvbMessageType_value = map[string]int32{
	"VALID":   0,
	"INVALID": 1,
}

func (x KvbMessageType) Enum() *KvbMessageType {
	p := new(KvbMessageType)
	*p = x
	return p
}
func (x KvbMessageType) String() string {
	return proto.EnumName(KvbMessageType_name, int32(x))
}
func (x *KvbMessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(KvbMessageType_value, data, "KvbMessageType")
	if err != nil {
		return err
	}
	*x = KvbMessageType(value)
	return nil
}
func (KvbMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_concord_hlf_68d30fa8d5cef757, []int{0, 0}
}

type KvbMessage struct {
	State                *KvbMessageType `protobuf:"varint,1,opt,name=state,enum=com.vmware.concord.kvb.KvbMessageType" json:"state,omitempty"`
	Key                  *string         `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value                *string         `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *KvbMessage) Reset()         { *m = KvbMessage{} }
func (m *KvbMessage) String() string { return proto.CompactTextString(m) }
func (*KvbMessage) ProtoMessage()    {}
func (*KvbMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_concord_hlf_68d30fa8d5cef757, []int{0}
}
func (m *KvbMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KvbMessage.Unmarshal(m, b)
}
func (m *KvbMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KvbMessage.Marshal(b, m, deterministic)
}
func (dst *KvbMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvbMessage.Merge(dst, src)
}
func (m *KvbMessage) XXX_Size() int {
	return xxx_messageInfo_KvbMessage.Size(m)
}
func (m *KvbMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_KvbMessage.DiscardUnknown(m)
}

var xxx_messageInfo_KvbMessage proto.InternalMessageInfo

func (m *KvbMessage) GetState() KvbMessageType {
	if m != nil && m.State != nil {
		return *m.State
	}
	return KvbMessage_VALID
}

func (m *KvbMessage) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *KvbMessage) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*KvbMessage)(nil), "com.vmware.concord.kvb.KvbMessage")
	proto.RegisterEnum("com.vmware.concord.kvb.KvbMessageType", KvbMessageType_name, KvbMessageType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Access service

type AccessClient interface {
	GetState(ctx context.Context, in *KvbMessage, opts ...grpc.CallOption) (*KvbMessage, error)
	PutState(ctx context.Context, in *KvbMessage, opts ...grpc.CallOption) (*KvbMessage, error)
	WriteBlock(ctx context.Context, in *KvbMessage, opts ...grpc.CallOption) (*KvbMessage, error)
	// use chaincode name + key as the KEY
	GetHistoryForKey(ctx context.Context, in *KvbMessage, opts ...grpc.CallOption) (*QueryResponse, error)
}

type accessClient struct {
	cc *grpc.ClientConn
}

func NewAccessClient(cc *grpc.ClientConn) AccessClient {
	return &accessClient{cc}
}

func (c *accessClient) GetState(ctx context.Context, in *KvbMessage, opts ...grpc.CallOption) (*KvbMessage, error) {
	out := new(KvbMessage)
	err := grpc.Invoke(ctx, "/com.vmware.concord.kvb.Access/GetState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) PutState(ctx context.Context, in *KvbMessage, opts ...grpc.CallOption) (*KvbMessage, error) {
	out := new(KvbMessage)
	err := grpc.Invoke(ctx, "/com.vmware.concord.kvb.Access/PutState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) WriteBlock(ctx context.Context, in *KvbMessage, opts ...grpc.CallOption) (*KvbMessage, error) {
	out := new(KvbMessage)
	err := grpc.Invoke(ctx, "/com.vmware.concord.kvb.Access/WriteBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessClient) GetHistoryForKey(ctx context.Context, in *KvbMessage, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := grpc.Invoke(ctx, "/com.vmware.concord.kvb.Access/GetHistoryForKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Access service

type AccessServer interface {
	GetState(context.Context, *KvbMessage) (*KvbMessage, error)
	PutState(context.Context, *KvbMessage) (*KvbMessage, error)
	WriteBlock(context.Context, *KvbMessage) (*KvbMessage, error)
	// use chaincode name + key as the KEY
	GetHistoryForKey(context.Context, *KvbMessage) (*QueryResponse, error)
}

func RegisterAccessServer(s *grpc.Server, srv AccessServer) {
	s.RegisterService(&_Access_serviceDesc, srv)
}

func _Access_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvbMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vmware.concord.kvb.Access/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).GetState(ctx, req.(*KvbMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_PutState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvbMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).PutState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vmware.concord.kvb.Access/PutState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).PutState(ctx, req.(*KvbMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_WriteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvbMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).WriteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vmware.concord.kvb.Access/WriteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).WriteBlock(ctx, req.(*KvbMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Access_GetHistoryForKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvbMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServer).GetHistoryForKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.vmware.concord.kvb.Access/GetHistoryForKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServer).GetHistoryForKey(ctx, req.(*KvbMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Access_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.vmware.concord.kvb.Access",
	HandlerType: (*AccessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _Access_GetState_Handler,
		},
		{
			MethodName: "PutState",
			Handler:    _Access_PutState_Handler,
		},
		{
			MethodName: "WriteBlock",
			Handler:    _Access_WriteBlock_Handler,
		},
		{
			MethodName: "GetHistoryForKey",
			Handler:    _Access_GetHistoryForKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peer/concord_hlf.proto",
}

func init() { proto.RegisterFile("peer/concord_hlf.proto", fileDescriptor_concord_hlf_68d30fa8d5cef757) }

var fileDescriptor_concord_hlf_68d30fa8d5cef757 = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xcd, 0x4a, 0x33, 0x31,
	0x14, 0x86, 0x3b, 0xed, 0xd7, 0x4f, 0x7b, 0x04, 0x29, 0x41, 0x4b, 0xed, 0x42, 0xca, 0x6c, 0xac,
	0x08, 0x19, 0xe8, 0xde, 0x45, 0x8b, 0x58, 0x4b, 0xfd, 0xad, 0x52, 0xc1, 0x4d, 0xc9, 0xa4, 0xa7,
	0x9d, 0xd0, 0x99, 0xc9, 0x90, 0x64, 0x46, 0x72, 0x1d, 0x5e, 0x9f, 0xf7, 0x22, 0xd3, 0x08, 0x6e,
	0x04, 0xbb, 0xe8, 0x2e, 0x6f, 0xf2, 0x3e, 0x0f, 0x81, 0x73, 0xa0, 0x95, 0x21, 0xaa, 0x80, 0xcb,
	0x94, 0x4b, 0xb5, 0x98, 0x47, 0xf1, 0x92, 0x66, 0x4a, 0x1a, 0x49, 0x5a, 0x5c, 0x26, 0xb4, 0x48,
	0xde, 0x99, 0x42, 0xfa, 0xfd, 0x4a, 0xd7, 0x45, 0xd8, 0x39, 0x71, 0xfd, 0x88, 0x89, 0x94, 0xcb,
	0x05, 0xce, 0x75, 0x24, 0x12, 0x87, 0xf8, 0x1f, 0x1e, 0xc0, 0xa4, 0x08, 0xef, 0x50, 0x6b, 0xb6,
	0x42, 0x72, 0x09, 0x75, 0x6d, 0x98, 0xc1, 0xb6, 0xd7, 0xf5, 0x7a, 0x87, 0xfd, 0x33, 0xfa, 0xbb,
	0x91, 0xfe, 0x20, 0xd4, 0xd8, 0x0c, 0xa7, 0x8e, 0x22, 0x4d, 0xa8, 0xad, 0xd1, 0xb6, 0xab, 0x5d,
	0xaf, 0xd7, 0x98, 0x96, 0x47, 0x72, 0x04, 0xf5, 0x82, 0xc5, 0x39, 0xb6, 0x6b, 0x9b, 0x3b, 0x17,
	0xfc, 0x53, 0xf8, 0x57, 0x62, 0xa4, 0x01, 0xf5, 0xd9, 0xe0, 0x76, 0x7c, 0xd5, 0xac, 0x90, 0x03,
	0xd8, 0x1b, 0xdf, 0xbb, 0xe0, 0xf5, 0x3f, 0xab, 0xf0, 0x7f, 0xc0, 0x39, 0x6a, 0x4d, 0x5e, 0x60,
	0x7f, 0x84, 0xe6, 0x79, 0xa3, 0xf7, 0xff, 0xfe, 0x4e, 0x67, 0x8b, 0x8e, 0x5f, 0x29, 0xad, 0x8f,
	0xf9, 0xce, 0xad, 0x33, 0x80, 0x57, 0x25, 0x0c, 0x0e, 0x63, 0xc9, 0xd7, 0x3b, 0xf4, 0x3e, 0x40,
	0x73, 0x84, 0xe6, 0x46, 0x68, 0x23, 0x95, 0xbd, 0x96, 0x6a, 0x82, 0x76, 0x2b, 0xfb, 0xb1, 0x1b,
	0xb2, 0xa6, 0x4f, 0x39, 0x2a, 0x3b, 0x45, 0x9d, 0xc9, 0x54, 0xa3, 0x5f, 0x19, 0x5e, 0xbc, 0x9d,
	0xaf, 0x84, 0x89, 0xf2, 0xb0, 0x94, 0x04, 0x91, 0xcd, 0x50, 0xc5, 0xb8, 0x58, 0xa1, 0x0a, 0x96,
	0x2c, 0x54, 0x82, 0x07, 0x8e, 0x0b, 0xca, 0xbd, 0xf9, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x84, 0x27,
	0x0a, 0xb5, 0x6e, 0x02, 0x00, 0x00,
}
